apply plugin: 'com.android.library'

if (project.plugins.hasPlugin("com.android.library")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
} else if (project.plugins.hasPlugin("java")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.java.srcDirs
    }
} else if (project.plugins.hasPlugin("groovy")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.groovy.srcDirs
    }
}

if (project.tasks['sourcesJar']) {
    artifacts {
        archives sourcesJar
    }
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    compileOnly project(path: ':modules:libb')
}

//dynamicDependency {
//    Properties properties = new Properties()
//    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
//    properties.load(inputStream)
//
//    libb {
//        //如果是true，则使用本地模块作为依赖参与编译，否则使用下面的配置获取远程的构件作为依赖参与编译
//        debuggable = properties.getProperty("libb") ? false : true
//        groupId = "com.youzan.mobile.test"
//        artifactId = "libb" // 默认使用模块的名称作为其值
//        version = properties.getProperty("libb")
//    }
//}

mavenPublish {
    Properties properties = new Properties()
    InputStream inputStream = project.file('local.properties').newDataInputStream()
    properties.load(inputStream)

    localPublish = false
    version = properties.getProperty("sdk_version") // 如果不包含SNAPSHOT，则发布到release的仓库
    groupId = properties.getProperty("sdk_groupId")
    artifactId = properties.getProperty("sdk_artifactId")
    userName="mobile"
    password="BlRlkE9W"
    desc="我是一个库"
    snapshotRepo="http://maven.qima-inc.com/content/repositories/snapshots/"
}