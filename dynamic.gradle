import groovy.json.JsonOutput
import groovy.json.JsonSlurper

dynamicDependency {
    Properties localProperties = new Properties()
    InputStream localStream = project.rootProject.file('local.properties').newDataInputStream()
    localProperties.load(localStream)
    if (!Boolean.valueOf(localProperties.getProperty("aarBuild"))) {
        if (!project.hasProperty("aarBuild") || project.aarBuild == "unspecified" || !Boolean.valueOf(project.aarBuild)) {
            return
        }
    }
    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file('version.properties').newDataInputStream()
    properties.load(inputStream)

    String rootDir = project.rootProject.rootDir
    File enjoyJson = new File(rootDir + "/enjoy.json")
    HashMap<String, String> chooseMap = new HashMap<>()
    if (enjoyJson.exists()) {
        def jsonArray = new JsonSlurper().parse(enjoyJson)
        jsonArray.each {
            def json = new JsonSlurper().parseText(JsonOutput.toJson(it))
            chooseMap.put(json.name, json.choose)
        }
    }

    lib_common {
        //如果是true，则使用本地模块作为依赖参与编译，否则使用下面的配置获取远程的构件作为依赖参与编译
        //支持./gradlew AutoPublishPadAll -PaarBuild="true"强制采用aar依赖
        //默认情况下project.aarBuild = false,所以会根据后面的值确定是否采用aar依赖
        debuggable =  project.aarBuild ? !project.aarBuild : !chooseMap.get("lib_common", false)
//        flavor = "pad"
        groupId = "com.youzan.mobile"
        artifactId = "lib_common" // 默认使用模块的名称作为其值
        version = properties.getProperty("lib_common")
    }
    liba {
        //如果是true，则使用本地模块作为依赖参与编译，否则使用下面的配置获取远程的构件作为依赖参与编译
        debuggable = project.aarBuild ? !project.aarBuild : !chooseMap.get("liba", false)
//        flavor = "pad"
        groupId = "com.youzan.mobile"
        artifactId = "liba" // 默认使用模块的名称作为其值
        version = properties.getProperty("liba")
    }
    libb {
        //如果是true，则使用本地模块作为依赖参与编译，否则使用下面的配置获取远程的构件作为依赖参与编译
        debuggable = project.aarBuild ? !project.aarBuild : !chooseMap.get("libb", false)
//        flavor = "pad"
        groupId = "com.youzan.mobile"
        artifactId = "libb" // 默认使用模块的名称作为其值
        version = properties.getProperty("libb")
    }
}

taskExecTime {
    threshold 100
    sorted true
}