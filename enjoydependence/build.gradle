apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'

if (project.plugins.hasPlugin("com.android.library")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
} else if (project.plugins.hasPlugin("java")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.java.srcDirs
    }
} else if (project.plugins.hasPlugin("groovy")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.groovy.srcDirs
    }
}

if (project.tasks['sourcesJar']) {
    artifacts {
        archives sourcesJar
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation gradleApi()
    implementation localGroovy()
    compileOnly "com.android.tools.build:gradle:3.1.4"
    implementation "com.youzan.mobile:httpBuilder:1.0.4"
}

//maven-publish 配置
publishing {
    Properties properties = new Properties()
    InputStream inputStream = project.file('local.properties').newDataInputStream()
    properties.load(inputStream)

    repositories {
        def localMaven = Boolean.valueOf(properties.getProperty("localBuild"))

        if (localMaven) {
            mavenLocal()
        } else {
            maven {
                credentials {
                    username properties.getProperty("user_name") // 仓库发布用户名
                    password properties.getProperty("user_pwd") // 仓库发布用户密码
                }
                if (properties.getProperty("sdk_version").endsWith("-SNAPSHOT")) {
                    url properties.getProperty("SNAPSHOT_REPOSITORY_URL") // 仓库地址
                } else {
                    url properties.getProperty("RELEASE_REPOSITORY_URL") // 仓库地址
                }
            }
        }
    }

    publications {
        maven(MavenPublication) {
//            artifact "${project.buildDir}/libs/${project.name}.jar"
            groupId properties.getProperty("sdk_groupId")
            artifactId properties.getProperty("sdk_artifactId")
            version properties.getProperty("sdk_version")
            from components.java
        }
    }
}

//maven
uploadArchives {
    repositories {
        Properties properties = new Properties()
        InputStream inputStream = project.file('local.properties').newDataInputStream()
        properties.load(inputStream)
        def localMaven = Boolean.valueOf(properties.getProperty("localBuild"))
        mavenDeployer {
            if (localMaven) {
                snapshotRepository(url: uri("${rootDir}/.publish"))
                repository(url: uri("${rootDir}/.publish"))
            } else {
                def USERNAME = properties.getProperty("user_name")
                def PASSWORD = properties.getProperty("user_pwd")
                if (USERNAME != null && PASSWORD != null) {
                    snapshotRepository(url: properties.getProperty("SNAPSHOT_REPOSITORY_URL")) {
                        authentication(userName: USERNAME, password: PASSWORD)
                    }
                    repository(url: properties.getProperty("RELEASE_REPOSITORY_URL")) {
                        authentication(userName: USERNAME, password: PASSWORD)
                    }
                }
            }
            pom.packaging = 'jar'
            pom.version = properties.getProperty("sdk_version")
            pom.groupId = properties.getProperty("sdk_groupId")
            pom.artifactId = properties.getProperty("sdk_artifactId")
        }
    }
}